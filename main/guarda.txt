/**
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"

// const int RED_LED = 19;
// const int GREEN_LED = 20;
// const int BLUE_LED = 21;
const int BTN_PIN_Y = 2;
const int BTN_PIN_R = 3;
const int BTN_PIN_B = 4;
const int BTN_PIN_G = 5;
const int BUZZER_PIN = 6;
volatile int btn_y_state = 0;
volatile int btn_r_state = 0;
volatile int btn_b_state = 0;
volatile int btn_g_state = 0;

void btn_callback(uint gpio, uint32_t events){
    if(gpio == BTN_PIN_R && events == GPIO_IRQ_EDGE_FALL){
        btn_r_state = 1;
    } else if (gpio == BTN_PIN_B && events == GPIO_IRQ_EDGE_FALL){
        btn_b_state = 1;
    } else if(gpio == BTN_PIN_Y && events == GPIO_IRQ_EDGE_FALL){
        btn_y_state = 1;
    } else if (gpio == BTN_PIN_G && events == GPIO_IRQ_EDGE_FALL){
        btn_g_state = 1;
    }
}

void play_sound(int freq, int duration_ms, int btn){
    int t = 1000000/(freq*2); // o 10^6 eh pq estamos convertendo para microsegundos e t = 1/f, e dividimos por 2 por ser metade da onda ligada e metade desligada
    int n = duration_ms / 10; // quantidade de vezes que fazemos a onda inteira
    for(int i = 0; i < n; i++){
        gpio_put(btn, 1);
        sleep_us(t);
        gpio_put(btn, 0);
        sleep_us(t);
    }
}

int main() {
    stdio_init_all();

    gpio_init(BTN_PIN_R);
    gpio_set_dir(BTN_PIN_R, GPIO_IN);
    gpio_pull_up(BTN_PIN_R);

    gpio_init(BTN_PIN_B);
    gpio_set_dir(BTN_PIN_B, GPIO_IN);
    gpio_pull_up(BTN_PIN_B);

    gpio_init(BTN_PIN_Y);
    gpio_set_dir(BTN_PIN_Y, GPIO_IN);
    gpio_pull_up(BTN_PIN_Y);

    gpio_init(BTN_PIN_G);
    gpio_set_dir(BTN_PIN_G, GPIO_IN);
    gpio_pull_up(BTN_PIN_G);

    gpio_init(BUZZER_PIN);
    gpio_set_dir(BUZZER_PIN, GPIO_OUT);

    gpio_set_irq_enabled_with_callback(BTN_PIN_R, GPIO_IRQ_EDGE_FALL, true, &btn_callback);
    gpio_set_irq_enabled(BTN_PIN_B, GPIO_IRQ_EDGE_FALL, true);
    gpio_set_irq_enabled(BTN_PIN_Y, GPIO_IRQ_EDGE_FALL, true);
    gpio_set_irq_enabled(BTN_PIN_G, GPIO_IRQ_EDGE_FALL, true);

    int freq1 = 220;
    int freq2 = 440;
    int freq3 = 660;
    int freq4 = 880;
    int duration = 1000;

    while (true) {
        if(btn_r_state){
            btn_r_state = 0;
            play_sound(freq1, duration, BUZZER_PIN);
        } else if(btn_b_state){
            btn_b_state = 0;
            play_sound(freq2, duration, BUZZER_PIN);
        } else if(btn_y_state){
            btn_y_state = 0;
            play_sound(freq3, duration, BUZZER_PIN);
        } else if(btn_g_state){
            btn_g_state = 0;
            play_sound(freq4, duration, BUZZER_PIN);
        }
    }
}

















/**
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "pico/stdlib.h"
#include "hardware/pwm.h"

// Define RGB LED pins
#define RED_PIN 15
#define GREEN_PIN 14
#define BLUE_PIN 13

// Function to initialize PWM for RGB LED
void init_pwm() {
    // Initialize PWM for each color pin
    pwm_set_wrap(pwm_gpio_to_slice_num(RED_PIN), 255);
    pwm_set_wrap(pwm_gpio_to_slice_num(GREEN_PIN), 255);
    pwm_set_wrap(pwm_gpio_to_slice_num(BLUE_PIN), 255);
    pwm_init(pwm_gpio_to_slice_num(RED_PIN));
    pwm_init(pwm_gpio_to_slice_num(GREEN_PIN));
    pwm_init(pwm_gpio_to_slice_num(BLUE_PIN));

    // Set GPIO functions to PWM
    gpio_set_function(RED_PIN, GPIO_FUNC_PWM);
    gpio_set_function(GREEN_PIN, GPIO_FUNC_PWM);
    gpio_set_function(BLUE_PIN, GPIO_FUNC_PWM);
}

// Function to set RGB LED color
void set_rgb_color(uint8_t red, uint8_t green, uint8_t blue) {
    // Set PWM levels for each color pin
    pwm_set_gpio_level(RED_PIN, red);
    pwm_set_gpio_level(GREEN_PIN, green);
    pwm_set_gpio_level(BLUE_PIN, blue);
}

int main() {
    // Initialize the standard I/O library
    stdio_init_all();

    // Initialize PWM for RGB LED
    init_pwm();

    while (1) {
        // Set the RGB LED to different colors
        set_rgb_color(255, 0, 0); // Red
        sleep_ms(1000); // Wait for 1 second

        set_rgb_color(0, 255, 0); // Green
        sleep_ms(1000); // Wait for 1 second

        set_rgb_color(0, 0, 255); // Blue
        sleep_ms(1000); // Wait for 1 second

        set_rgb_color(255, 255, 0); // Yellow
        sleep_ms(1000); // Wait for 1 second

        set_rgb_color(255, 0, 255); // Purple
        sleep_ms(1000); // Wait for 1 second
    }

    return 0;
}